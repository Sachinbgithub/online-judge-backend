@baseUrl = http://192.168.0.239:5081/api/PracticeTest

### Create Practice Test
POST {{baseUrl}}/create
Content-Type: application/json

{
  "domainId": 1,
  "subdomainId": 1,
  "totalMarks": 1000,
  "durationMinutes": 480,
  "createdBy": 1,
  "isActive": true,
  "isPublished": true,
  "allowMultipleAttempts": true,
  "maxAttempts": 10,
  "showResultsImmediately": true,
  "difficultyLevel": "Hard",
  "tags": "arrays,linked-lists,trees,graphs",
  "instructions": "Complete all questions within the time limit. Each question has multiple test cases.",
  "passingPercentage": 100,
  "questions": [
    {
      "problemId": 1,
      "questionOrder": 100,
      "marks": 100,
      "timeLimitMinutes": 60,
      "customInstructions": "Focus on time complexity optimization"
    },
    {
      "problemId": 2,
      "questionOrder": 200,
      "marks": 100,
      "timeLimitMinutes": 60,
      "customInstructions": "Consider edge cases carefully"
    }
  ]
}

### Start Practice Test
GET {{baseUrl}}/start?practiceTestId=1&userId=1

### Submit Practice Test Result - Perfect Score
POST {{baseUrl}}/submit-result
Content-Type: application/json

{
  "practiceTestId": 1,
  "userId": 1,
  "attemptNumber": 1,
  "startTime": "2024-01-15T10:00:00Z",
  "endTime": "2024-01-15T10:45:00Z",
  "questionResults": [
    {
      "problemId": 1,
      "questionOrder": 1,
      "submittedCode": "def twoSum(nums, target):\n    hashmap = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in hashmap:\n            return [hashmap[complement], i]\n        hashmap[num] = i\n    return []",
      "language": "python",
      "marks": 50,
      "obtainedMarks": 50.00,
      "isCorrect": true,
      "executionTime": 150,
      "memoryUsed": 1024,
      "testCasesPassed": 5,
      "totalTestCases": 5,
      "errorMessage": null,
      "compilationStatus": "Success",
      "executionStatus": "Success",
      "timeTakenMinutes": 25
    },
    {
      "problemId": 2,
      "questionOrder": 2,
      "submittedCode": "def addTwoNumbers(l1, l2):\n    dummy = ListNode(0)\n    current = dummy\n    carry = 0\n    \n    while l1 or l2 or carry:\n        val1 = l1.val if l1 else 0\n        val2 = l2.val if l2 else 0\n        total = val1 + val2 + carry\n        carry = total // 10\n        current.next = ListNode(total % 10)\n        current = current.next\n        l1 = l1.next if l1 else None\n        l2 = l2.next if l2 else None\n    \n    return dummy.next",
      "language": "python",
      "marks": 50,
      "obtainedMarks": 50.00,
      "isCorrect": true,
      "executionTime": 200,
      "memoryUsed": 1536,
      "testCasesPassed": 4,
      "totalTestCases": 4,
      "errorMessage": null,
      "compilationStatus": "Success",
      "executionStatus": "Success",
      "timeTakenMinutes": 20
    }
  ]
}

### Submit Practice Test Result - Partial Score
POST {{baseUrl}}/submit-result
Content-Type: application/json

{
  "practiceTestId": 1,
  "userId": 1,
  "attemptNumber": 2,
  "startTime": "2024-01-15T11:00:00Z",
  "endTime": "2024-01-15T11:50:00Z",
  "questionResults": [
    {
      "problemId": 1,
      "questionOrder": 1,
      "submittedCode": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\n    return []",
      "language": "python",
      "marks": 50,
      "obtainedMarks": 30.00,
      "isCorrect": false,
      "executionTime": 500,
      "memoryUsed": 512,
      "testCasesPassed": 3,
      "totalTestCases": 5,
      "errorMessage": "Time limit exceeded for some test cases",
      "compilationStatus": "Success",
      "executionStatus": "Success",
      "timeTakenMinutes": 30
    },
    {
      "problemId": 2,
      "questionOrder": 2,
      "submittedCode": "def addTwoNumbers(l1, l2):\n    # Incomplete solution\n    return None",
      "language": "python",
      "marks": 50,
      "obtainedMarks": 0.00,
      "isCorrect": false,
      "executionTime": 50,
      "memoryUsed": 256,
      "testCasesPassed": 0,
      "totalTestCases": 4,
      "errorMessage": "Function returned None instead of ListNode",
      "compilationStatus": "Success",
      "executionStatus": "Failed",
      "timeTakenMinutes": 20
    }
  ]
}

### Get Practice Test Result - Latest Attempt
GET {{baseUrl}}/result?practiceTestId=1&userId=1

### Get Practice Test Result - Specific Attempt
GET {{baseUrl}}/result?practiceTestId=1&userId=1&attemptNumber=1

### Get Practice Test Result - Different User
GET {{baseUrl}}/result?practiceTestId=1&userId=2

### Test error handling - invalid practice test ID
GET {{baseUrl}}/result?practiceTestId=999&userId=1

### Test error handling - invalid user ID
GET {{baseUrl}}/result?practiceTestId=1&userId=999

### Test error handling - invalid attempt number
GET {{baseUrl}}/result?practiceTestId=1&userId=1&attemptNumber=999

### Validate practice test and attempt before submitting
GET {{baseUrl}}/validate?practiceTestId=1&userId=1&attemptNumber=1

### Expected Response for Create Practice Test:
### {
###   "practiceTestId": 1,
###   "message": "Practice test created successfully",
###   "success": true
### }

### Expected Response for Start Practice Test:
### {
###   "practiceTestId": 1,
###   "testName": "Data Structures Practice Test",
###   "userId": 1,
###   "attemptNumber": 1,
###   "startedAt": "2024-01-15T10:00:00Z",
###   "endTime": "2024-01-15T11:00:00Z",
###   "durationMinutes": 60,
###   "questions": [
###     {
###       "questionOrder": 1,
###       "problemId": 1,
###       "problemTitle": "Two Sum",
###       "problemDescription": "Given an array of integers...",
###       "examples": "[2,7,11,15], target = 9",
###       "constraints": "2 <= nums.length <= 10^4",
###       "marks": 50,
###       "timeLimitMinutes": 30,
###       "customInstructions": "Focus on time complexity optimization",
###       "testCases": [...],
###       "starterCodes": [...]
###     }
###   ],
###   "success": true,
###   "message": "Practice test started successfully"
### }

### Expected Response for Submit Result:
### {
###   "practiceTestId": 1,
###   "userId": 1,
###   "attemptNumber": 1,
###   "totalMarks": 100,
###   "obtainedMarks": 100.00,
###   "percentage": 100.00,
###   "isPassed": true,
###   "timeTakenMinutes": 45,
###   "status": "Completed",
###   "submittedAt": "2024-01-15T10:45:00Z",
###   "success": true,
###   "message": "Practice test result submitted successfully"
### }

### Expected Response for Get Result:
### {
###   "practiceTestId": 1,
###   "testName": "Data Structures Practice Test",
###   "userId": 1,
###   "attemptNumber": 1,
###   "startedAt": "2024-01-15T10:00:00Z",
###   "completedAt": "2024-01-15T10:45:00Z",
###   "status": "Completed",
###   "totalMarks": 100,
###   "obtainedMarks": 100.00,
###   "percentage": 100.00,
###   "isPassed": true,
###   "timeTakenMinutes": 45,
###   "questionResults": [
###     {
###       "questionOrder": 1,
###       "problemId": 1,
###       "problemTitle": "Two Sum",
###       "problemDescription": "Given an array of integers...",
###       "language": "python",
###       "submittedCode": "def twoSum(nums, target):...",
###       "marks": 50,
###       "obtainedMarks": 50.00,
###       "isCorrect": true,
###       "executionTime": 150,
###       "memoryUsed": 1024,
###       "testCasesPassed": 5,
###       "totalTestCases": 5,
###       "errorMessage": null,
###       "compilationStatus": "Success",
###       "executionStatus": "Success",
###       "submittedAt": "2024-01-15T10:25:00Z",
###       "timeTakenMinutes": 25
###     }
###   ],
###   "success": true,
###   "message": "Practice test result retrieved successfully"
### }
